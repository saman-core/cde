name: CI-CD-CDE-LOCAL
on:
  workflow_dispatch:
    inputs:
      product:
        description: 'Product name'
        required: true
        type: string
      template:
        description: 'Template name'
        required: true
        type: string

env:
  PRODUCT: ${{ inputs.product }}
  TEMPLATE: ${{ inputs.template }}
  REGISTRY: ghcr.io
  ACTOR: saman-core
  IMAGE_APP_NAME: cde-${{ inputs.product }}-${{ inputs.template }}
  APP_NAME: cde-${{ inputs.product }}-${{ inputs.template }}
  MIN_SCALE: 0

jobs:
  build_contenizer:
    name: Build & Contenerize App
    runs-on: ubuntu-latest

    steps:
      - name: Log inputs
        run: |
          echo "Product: $PRODUCT"
          echo "Template: $TEMPLATE"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout product-repository
        uses: actions/checkout@v4
        with:
          repository: saman-core/product-repository
          path: product-repository

      - name: Set env DEPLOY_HASH
        run: |
          cd product-repository/
          echo "DEPLOY_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ..

      - name: Log DEPLOY_HASH
        run: |
          echo "DEPLOY_HASH: $DEPLOY_HASH"

      - name: Copy files
        run: |
          cp product-repository/products/$(echo $PRODUCT)/templates/$(echo $TEMPLATE)/form.json ./form.json
          sed -i -e 's/TEMPLATE_NAME/${{ env.TEMPLATE }}/g' -e 's/PRODUCT_NAME/${{ env.PRODUCT }}/g' ./template-details

      - name: Setup graalvm
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'mandrel'
          github-token: ${{ secrets.GIT_TOKEN }}
          native-image-job-reports: 'true'
          version: '23.1.4.0-Final'

      - name: Replace client properties
        run: |
          sed -i -e 's/TEMPLATE_NAME/${{ env.TEMPLATE }}/g' -e 's/PRODUCT_NAME/${{ env.PRODUCT }}/g' ./cde-client/src/main/resources/META-INF/microprofile-config.properties

      - name: Replace POMs name and version
        run: |
          sed -i -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' ./cde-application/pom.xml
          sed -i -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' ./cde-client/pom.xml
          sed -i -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' ./cde-data/pom.xml
          sed -i -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' ./cde-model/pom.xml
          sed -i -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' ./pom.xml

      - name: Set settings.xml
        env:
          SETTINGS_XML: ${{ secrets.SETTINGS_XML }}
          TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          base64 -d -i <<<$(echo $SETTINGS_XML) > settings.xml
          sed -i -e 's/OWNER/${{ env.ACTOR }}/g' -e 's/TOKEN/${{ env.TOKEN }}/g' ./settings.xml

      - name: Build native app
        run: |
          ./mvnw -s ./settings.xml install -DskipTests
          ./mvnw -s ./settings.xml -pl cde-application package -Pnative -DskipTests

      - name: Deploy app
        run: |
          ./mvnw -s ./settings.xml -pl cde-client deploy -DskipTests
          ./mvnw -s ./settings.xml -pl cde-data deploy -DskipTests
          ./mvnw -s ./settings.xml -pl cde-model deploy -DskipTests

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.ACTOR }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Container app build and push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./cde-application/src/main/docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.ACTOR }}/${{ env.IMAGE_APP_NAME }}:${{ env.DEPLOY_HASH }}

      - name: Update Template Schema JSON
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TEMPLATE_SERVER_URL: ${{ secrets.TEMPLATE_SERVER_URL_LOCAL }}
          OIDC_TOKEN_URL: ${{ secrets.OIDC_TOKEN_URL }}
        run: |
          curl  -X POST -d "grant_type=client_credentials&scope=openid&client_id=${{ env.CLIENT_ID }}&client_secret=${{ env.CLIENT_SECRET }}" ${{ env.OIDC_TOKEN_URL }} --insecure | jq -r '.access_token' > auttoken
          curl -i -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $(cat auttoken)" -X POST -d "$(cat form.json)" ${{ env.TEMPLATE_SERVER_URL }}/templates/${{ env.PRODUCT }}/${{ env.TEMPLATE }} --insecure

      - name: Set Kubectl
        uses: azure/setup-kubectl@v4

      - name: Set config file
        env:
          BASE64: ${{ secrets.ENV_FILE_LOCAL }}
        run: |
          base64 -d -i <<<$(echo $BASE64) >> .env
          sed -i 's/=/: /' .env
          sed -i 's/^/  /' .env
          sed -i 's/APP_NAME/${{ env.APP_NAME }}/g' ./cde-application/src/main/kubernetes/deploy-secret.yml
          cat .env >> ./cde-application/src/main/kubernetes/deploy-secret.yml

      - name: Set Kubeconfig file and deploy app to K8S
        env:
          BASE64: ${{ secrets.KUBE_CONFIG }}
        run: |
          base64 -d -i <<<$(echo $BASE64) > ./kubeconfig
          export KUBECONFIG=./kubeconfig
          sed -i -e 's/CONTAINER_IMAGE/${{ env.REGISTRY }}\/${{ env.ACTOR }}\/${{ env.IMAGE_APP_NAME }}:${{ env.DEPLOY_HASH }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/DEPLOY_HASH/${{ env.DEPLOY_HASH }}/g' -e 's/MIN_SCALE/${{ env.MIN_SCALE }}/g' ./cde-application/src/main/kubernetes/deployment-local.yml
          kubectl apply -f ./cde-application/src/main/kubernetes/deploy-secret.yml -n api --insecure-skip-tls-verify
          kubectl delete -f ./cde-application/src/main/kubernetes/deployment-local.yml -n api --insecure-skip-tls-verify || true
          kubectl apply -f ./cde-application/src/main/kubernetes/deployment-local.yml -n api --insecure-skip-tls-verify

